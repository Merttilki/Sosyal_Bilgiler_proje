# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe Oyunu</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            text-align: center;
            background: 
                url('https://images.unsplash.com/photo-1506748686214-e9df14d4d9d0?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzNjUyOXwwfDF8c2VhcmNofDJ8fGdyYWRpZW50fGVufDB8fHx8MTY5Mjc4NjA4Ng&ixlib=rb-4.0.3&q=80&w=1080') no-repeat center center fixed; 
            background-size: cover;
            margin: 0;
            padding: 20px;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        h1 {
            color: white;
            margin-bottom: 20px;
            font-size: 48px;
            text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.8);
            letter-spacing: 2px;
        }

        #board {
            display: grid;
            grid-template-columns: repeat(3, 120px);
            gap: 15px;
            padding: 20px;
            border-radius: 15px;
            background-color: rgba(255, 255, 255, 0.9);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .cell {
            width: 120px;
            height: 120px;
            background: #007bff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 72px;
            color: white;
            cursor: pointer;
            border-radius: 15px;
            transition: background-color 0.3s, transform 0.2s;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .cell:hover {
            background: #0056b3;
            transform: scale(1.05);
        }

        #restartButton {
            margin-top: 20px;
            padding: 12px 30px;
            font-size: 20px;
            color: white;
            background-color: #28a745;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.5s ease-in-out, transform 0.3s;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        #restartButton.show {
            opacity: 1;
            transform: scale(1);
        }

        #result {
            margin-top: 20px;
            font-size: 64px;
            color: #343a40;
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0);
            z-index: 10;
            text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.7);
            animation: fadeIn 0.5s forwards;
        }

        @keyframes fadeIn {
            to {
                transform: translate(-50%, -50%) scale(1);
                opacity: 1;
            }
        }

        .confetti {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: hidden;
            z-index: 5;
        }

        .confetti-piece {
            position: absolute;
            width: 10px;
            height: 10px;
            opacity: 0.9;
            animation: fall 4s forwards; /* 4 saniye boyunca yağacak */
        }

        @keyframes fall {
            to {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <h1>Tic-Tac-Toe</h1>
    <div id="board">
        <div class="cell" onclick="makeMove(0)"></div>
        <div class="cell" onclick="makeMove(1)"></div>
        <div class="cell" onclick="makeMove(2)"></div>
        <div class="cell" onclick="makeMove(3)"></div>
        <div class="cell" onclick="makeMove(4)"></div>
        <div class="cell" onclick="makeMove(5)"></div>
        <div class="cell" onclick="makeMove(6)"></div>
        <div class="cell" onclick="makeMove(7)"></div>
        <div class="cell" onclick="makeMove(8)"></div>
    </div>
    <button id="restartButton" onclick="restartGame()">Tekrar Başla</button>
    <div id="result"></div>
    <div class="confetti" id="confetti"></div>

    <script>
        let currentPlayer = 'X';
        const board = ['', '', '', '', '', '', '', '', ''];

        function makeMove(index) {
            if (board[index] === '' && !checkWinner()) {
                board[index] = currentPlayer;
                document.getElementsByClassName('cell')[index].innerText = currentPlayer;

                if (checkWinner()) {
                    showResult(`${currentPlayer} Kazandı!`);
                } else if (board.every(cell => cell !== '')) {
                    showResult('Beraberlik!');
                } else {
                    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                }
            }
        }

        function checkWinner() {
            const winningCombinations = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [2, 4, 6]
            ];

            for (let combination of winningCombinations) {
                const [a, b, c] = combination;
                if (board[a] && board[a] === board[b] && board[a] === board[c]) {
                    return true;
                }
            }
            return false;
        }

        function showResult(message) {
            const resultDiv = document.getElementById('result');
            resultDiv.innerText = message;
            resultDiv.style.display = 'block';
            resultDiv.style.animation = 'fadeIn 0.5s forwards';
            createConfetti();
            document.getElementById('restartButton').classList.add('show'); // Butonu göster
        }

        function createConfetti() {
            const confettiContainer = document.getElementById('confetti');
            const colors = ['#FF0', '#FF5733', '#33FF57', '#3357FF', '#FF33A8'];

            for (let i = 0; i < 1000; i++) {
                const confettiPiece = document.createElement('div');
                confettiPiece.classList.add('confetti-piece');
                confettiPiece.style.left = Math.random() * 100 + 'vw';
                confettiPiece.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confettiPiece.style.animationDelay = Math.random() * 0.5 + 's';
                confettiContainer.appendChild(confettiPiece);
                
                setTimeout(() => {
                    confettiPiece.remove();
                }, 4000); // Her konfeti 4 saniye sonra kaldır
            }
        }

        function restartGame() {
            for (let i = 0; i < board.length; i++) {
                board[i] = '';
                document.getElementsByClassName('cell')[i].innerText = '';
            }
            currentPlayer = 'X';
            document.getElementById('result').innerText = '';
            document.getElementById('result').style.display = 'none';
            document.getElementById('confetti').innerHTML = '';
            document.getElementById('restartButton').classList.remove('show'); // Butonu gizle
        }
    </script>
</body>
</html>
